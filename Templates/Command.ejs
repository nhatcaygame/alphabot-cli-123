<%Object.assign(globalThis, {
	listCommand: false,
	clean: false
})%><%if (listCommand) {%>const {getInstructor} = alphabot.helpers;
const childs = [];<%} else {%>const { /*get helper functions or somthing idk :|*/ } = alphabot.helpers[''];<%}%>

module.exports = {
	keywords: ['<%=name%>'],<%if (!clean){%> // (*unique)
	// keywords[0] phải là duy nhất (unique) để phân biệt với các modules khác!
	// Các từ khóa để gọi modules <%=name%> (có thể có nhiều keyword)
	// Ví dụ keyword 'test' thì khi có người nhắn /test là modules được gọi<%}%>
	name: '<%=name%>',<%if (!clean){%>
	// Tên ngắn gọn của modules<%}%>
	description: 'This modules is awesome!',<%if (!clean){%>
	// Nội dung của modules (hiển thị trong hướng dẫn chi tiết)<%}%>
	guide: '',<%if (!clean){%>
	// Hướng dẫn sử dụng của modules
	// Phần này được nối đuôi sau từ '/<%=name%> ' nên chú ý nhé<%}%>
	childs: <%if (listCommand){%>childs,<%} else {%>[],<%} if (!clean){%>
	// Các lệnh con của file này (nếu file này keywords[0] là 'test0' và childs là ['test1']
	// thì khi người dùng nhập /test0.test1 hoặc /test1 thì nó sẽ chạy lệnh trong file test1.js)
	// Quy tắc viết như hàm require('<here>') của nodejs
	// VD: ['./index', 'index.js', 'folder']<%}%>
	permission: {
		'*': '*'
	},<%if (!clean){%>
	// Bên trái là threadID (vd: '3026469720745071'), lưu ý: '*' có nghĩa là tất cả thread
	// Bên phải là quyền sử dụng, có thể là:
	// '*' : Mọi người
	// 'admin' : Chỉ admin
	// ['100007723935647', '100026785898608'] : Một số id user chỉ định (luôn là String nhé)
	// Nếu bên phải để [] thì có nghĩa sẽ không ai được xài<%}%>
	datastoreDesign: {
		account: {
			global: {},
			local: {},
		},
		thread: {
			global: {},
			local: {},
		},
	},<%if (!clean){%>
	// Thiết kế datastore cho modules (hơi giống Schema), chuẩn bị trước để tránh lỗi undefined
	// Datastore đã lưu sẽ kế thừa design này
	// account.global: Toàn cục tài khoản
	// account.local: Cục bộ tài khoản
	// thread.global: Toàn cục thread (box)
	// thread.local: Cục bộ thread (box)<%}%>
	async onLoad() {<%if (!clean){%>
		// Sau khi load xong modules và login bot, hàm này sẽ được gọi
		// Chủ yếu dùng để log hoặc gửi greeting message thôi không quan trọng<%}%>
	},
	hookType: 'none',<%if (!clean){%>
	// Bộ lọc tin nhắn cho hàm onMessage (hàm onCall không bị ảnh hưởng)
	// '*': Lắng nghe tất cả tin nhắn
	// 'none': Không lắng nghe tin nhắn
	// 'command-only': Chỉ lắng nghe câu lệnh
	// 'non-command': Chỉ lắng nghe tin nhắn không phải câu lệnh<%}%>
	async onMessage(message, reply) {<%if (!clean){%>
		// Được gọi mỗi khi đáp ứng yêu cầu hookType
		// Chủ yếu dùng để làm mấy modules kiểu gián điệp hoặc game
		// Xử lí mọi tin nhắn mà không cần prefix<%}%>
	},
	async onCall(message, reply) {<%if (!clean){%>
		// Được gọi khi có member xài lệnh modules này
		// Là cốt lõi của modules không có phần này thì có nghĩa sẽ không có chuyện
		// gì xảy ra khi gọi modules<%}
		if (listCommand) {%>await reply(alphabot.helpers.getInstructor('<%=name%>', childs));
		// Hàm trên để gửi danh sách lệnh (theo thuộc tính childs)<%}%>
	}
};<%if (!clean){%>
// Lưu ý: Hàm onMessage, onCall có thể xài this.storage để truy cập datastore nhé!
<%}%>